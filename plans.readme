# Planos de Desenvolvimento - AR Contabilidade

## ðŸ“‹ Plano: Front-end Angular (Bootstrap) para AR GestÃ£o ContÃ¡bil e Financeira

### Escopo

- Criar app Angular com TypeScript, UI com Bootstrap, rotas: Home, Clientes, Outsourcing
- Arquitetura limpa (mÃ³dulos `core`, `shared`, `features/*`, `infra`), princÃ­pios SOLID
- Assistente de IA (widget flutuante) com serviÃ§o stub inicialmente; posterior integraÃ§Ã£o ao back Spring Boot
- RepositÃ³rio do front separado, pronto para CI/CD e integraÃ§Ã£o futura
- ConteÃºdo inicial baseado no site antigo para referÃªncias de seÃ§Ãµes e copy bÃ¡sica ([site antigo](https://arcontabilidade-am.com.br/))

### Stack

- Angular 18+ (standalone desativado; usaremos NgModules para modularidade)
- Bootstrap 5.x + `@ng-bootstrap/ng-bootstrap`
- TypeScript estrito, ESLint + Prettier

### Estrutura de pastas

- `src/app/core/` (serviÃ§os base, guards, interceptors, tokens, config)
- `src/app/shared/` (componentes, pipes, directives reutilizÃ¡veis)
- `src/app/features/`
  - `home/`
  - `clientes/`
  - `equipe/`
  - `auth/` (login)
  - `assistente/` (widget e chat)
- `src/app/infra/` (adapters HTTP, mapeadores, gateways)
- `src/app/routes/app-routing.module.ts`
- `src/environments/` (`environment.ts`)
- `src/assets/` (logo, cores, favicon)

### Rotas iniciais

- `/` â†’ Home
- `/clientes` â†’ InformaÃ§Ãµes para clientes (PF/PJ visÃ£o geral, links Ãºteis)
- `/equipe` â†’ Equipe/Empresa (sobre, missÃ£o, valores, contatos)
- `/login` â†’ Login (stub de autenticaÃ§Ã£o; integraÃ§Ã£o futura)

### UI/Branding moderno

- Hero na Home com tÃ­tulo forte, subtÃ­tulo e CTA (Contato/WhatsApp)
- Cards para serviÃ§os principais (ContÃ¡bil, Fiscal, RH) com Ã­cones
- SeÃ§Ã£o "Por que a AR GestÃ£o?" com mÃ©tricas/selos (anos de mercado, clientes)
- Navbar sticky, offcanvas em mobile; footer limpo com mapa/link para contato
- Tema Bootstrap com cores corporativas, tipografia moderna (Inter/Roboto)
- Dark mode opcional (toggle simples com `data-bs-theme`)

### Assistente de IA (fase 1)

- BotÃ£o flutuante (FAB) abre um painel de chat
- ServiÃ§o `AssistenteService` com stub (FAQs, links, encaminhar para contato)
- Depois, gateway HTTP para back-end (`/ai/chat`)

### Camadas e Clean Architecture

- `core`: contratos (ports) e modelos domÃ­nio: `Cliente`, `TipoPessoa`, `Usuario`
- `infra`: adapters HTTP implementando ports (`ClienteGateway`, `AuthGateway`)
- `features`: casos de uso por feature
- DependÃªncias unidirecionais: features â†’ core/shared; infra implementa ports de core

### ServiÃ§os e Interceptadores

- `AuthInterceptor` (injeta token quando existir)
- `HttpErrorInterceptor` (tratamento genÃ©rico de erros)
- `ApiConfigToken` para `API_BASE_URL` (de `environment`)

### Acessibilidade e SEO

- Metatags base (title, description), `og:*` e `twitter:*`
- Roles ARIA, foco gerenciado no widget do assistente

### Arquivos-chave

- `angular.json`, `package.json` com Bootstrap e ng-bootstrap
- `src/styles.scss` (import Bootstrap + overrides + tema)
- `src/app/app.module.ts`, `src/app/routes/app-routing.module.ts`
- `src/app/layout/header`, `src/app/layout/footer`
- `src/app/features/{home,clientes,equipe,auth}/`
- `src/app/features/assistente/assistant-widget.component.*`
- `src/app/core/models/*.ts`, `src/app/core/ports/*.ts`
- `src/app/infra/http/*.ts` (gateways)
- `src/app/core/interceptors/*.ts`
- `src/environments/environment*.ts`

### Passos de build iniciais

1. `npm install -g @angular/cli`
2. `ng new ar-gestao-frontend --routing --style=scss`
3. Adicionar Bootstrap: `npm i bootstrap @popperjs/core @ng-bootstrap/ng-bootstrap`
4. Importar Bootstrap em `styles.scss`; configurar tema/corpo
5. Criar `core`, `shared`, `infra`, `features/*` e rotas lazy
6. Implementar layout (navbar, footer); Home com hero + cards
7. Adicionar assistente (FAB + painel) com serviÃ§o stub
8. ESLint/Prettier e scripts NPM (`lint`, `format`)

### IntegraÃ§Ã£o futura com back Spring Boot

- `AuthGateway` â†’ `/auth/login`
- `ClienteGateway` â†’ `/clientes` (PF/PJ)
- `AssistenteGateway` â†’ `/ai/chat`
- Base URL por ambiente via `environment`

---

## ðŸ”— Plano: RepositÃ³rios para ComunicaÃ§Ã£o Frontend-Backend

### Objetivo

Implementar a camada de repositÃ³rios no Angular para comunicaÃ§Ã£o com o backend (Spring Boot na porta 8080), seguindo o padrÃ£o com BaseRepository, e reorganizar a documentaÃ§Ã£o do projeto.

### Arquitetura da SoluÃ§Ã£o

#### 1. ConfiguraÃ§Ã£o de Ambiente
Criar arquivo de environment para gerenciar URL:
- `frontend/src/environments/environment.ts` - desenvolvimento (http://localhost:8080)

#### 2. Camada de RepositÃ³rios (`frontend/src/app/infra/repository/`)

**BaseRepository** (classe abstrata):
- Injetar `HttpClient` do Angular
- Propriedade `apiUrl` protegida (do environment)
- MÃ©todo `getAuthHeaders()` para incluir token JWT do localStorage
- MÃ©todos auxiliares para requisiÃ§Ãµes HTTP

**RepositÃ³rios EspecÃ­ficos** (estendem BaseRepository):
- `auth.repository.ts` - login, logout, validaÃ§Ã£o de token
- `cliente.repository.ts` - CRUD de clientes
- `equipe.repository.ts` - operaÃ§Ãµes de equipe
- `assistente.repository.ts` - comunicaÃ§Ã£o com IA modelo gemini

#### 3. Models/DTOs (`frontend/src/app/core/models/`)
Criar interfaces TypeScript para:
- `auth.model.ts` - LoginRequest, LoginResponse, Usuario
- `cliente.model.ts` - Cliente, ClienteDTO
- `equipe.model.ts` - Membro, EquipeDTO
- `assistente.model.ts` - ChatMessage, ChatResponse

#### 4. ConfiguraÃ§Ã£o do App
- Adicionar `provideHttpClient()` no `app.config.ts`

### Estrutura de Arquivos

```
frontend/src/
â”œâ”€â”€ environments/
â”‚   â””â”€â”€ environment.ts           # apiUrl: 'http://localhost:8080'
â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ core/
â”‚   â”‚   â””â”€â”€ models/
â”‚   â”‚       â”œâ”€â”€ auth.model.ts
â”‚   â”‚       â”œâ”€â”€ cliente.model.ts
â”‚   â”‚       â”œâ”€â”€ equipe.model.ts
â”‚   â”‚       â””â”€â”€ assistente.model.ts
â”‚   â””â”€â”€ infra/
â”‚       â””â”€â”€ repository/
â”‚           â”œâ”€â”€ base.repository.ts
â”‚           â”œâ”€â”€ auth.repository.ts
â”‚           â”œâ”€â”€ cliente.repository.ts
â”‚           â”œâ”€â”€ equipe.repository.ts
â”‚           â””â”€â”€ assistente.repository.ts
```

### Exemplo de Uso nos Services

```typescript
// No ClienteService
constructor(private clienteRepo: ClienteRepository) {}

listarClientes() {
  return this.clienteRepo.getAll();
}
```

### PreparaÃ§Ã£o para Backend

Quando criar o backend Spring Boot, configure CORS:
```java
@CrossOrigin(origins = "http://localhost:4200")
```

### Arquivos-Chave
- `frontend/src/environments/environment.ts`
- `frontend/src/app/app.config.ts` 
- `frontend/src/app/infra/repository/base.repository.ts`
- `frontend/src/app/core/models/*.model.ts`

---

## âœ… Status de ImplementaÃ§Ã£o

### Frontend Angular - Base
- [x] Inicializar projeto Angular e configurar TypeScript estrito
- [x] Instalar Bootstrap e @ng-bootstrap, configurar styles.scss
- [x] Criar mÃ³dulos core, shared, infra e features
- [x] Configurar AppRouting e lazy loading das features
- [x] Implementar layout (navbar/header, footer, container)
- [x] Criar pÃ¡gina Home com hero, cards e CTA
- [x] Criar pÃ¡gina Clientes com infos PF/PJ e links Ãºteis
- [x] Criar pÃ¡gina Equipe/Empresa (sobre, missÃ£o, valores)
- [x] Criar pÃ¡gina Login com formulÃ¡rio e serviÃ§o stub
- [x] Criar widget de assistente de IA com serviÃ§o stub

### RepositÃ³rios Frontend-Backend
- [x] Criar arquivo environment.ts com configuraÃ§Ã£o de apiUrl para desenvolvimento
- [x] Criar interfaces/models no core (auth, cliente, equipe, assistente)
- [x] Implementar BaseRepository abstrato com HttpClient e getAuthHeaders
- [x] Criar repositÃ³rios especÃ­ficos (auth, cliente, equipe, assistente) estendendo BaseRepository
- [x] Adicionar provideHttpClient no app.config.ts
- [x] Criar plans.readme consolidando planos e remover pasta .cursor

### PrÃ³ximos Passos
- [ ] Adicionar AuthInterceptor e HttpErrorInterceptor
- [ ] Configurar ApiConfigToken
- [ ] Configurar ESLint/Prettier e scripts NPM
- [ ] Implementar testes unitÃ¡rios para repositÃ³rios
- [ ] Criar backend Spring Boot com endpoints correspondentes
- [ ] Configurar CORS no backend
- [ ] Implementar autenticaÃ§Ã£o JWT no backend
